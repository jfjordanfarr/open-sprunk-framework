<!-- filepath: docs/Units/app-main-bootstrap.mdmd -->
::: {unit}
id: "app-main-bootstrap"
unit-type: "javascript-module-definition"
language: "javascript"
status: "draft"
version: "0.2"
brief: "Application entry point that initializes all modules and sets up the UI."
source-ref: "../src/main.js"

The main bootstrap module initializes the entire application, sets up all editor modules, and handles the primary navigation between different views.

```javascript
import { AppCore } from './core/AppCore.js';
import { CharacterEditor } from './character/CharacterEditor.js';
import { MusicEditor } from './music/MusicEditor.js';
import { AnimationEditor } from './animation/AnimationEditor.js';
import { PerformanceStage } from './stage/PerformanceStage.js';
import { DataManager } from './data/DataManager.js';

class SpunkiApp {
    constructor() {
        this.appCore = null;
        this.editors = {};
        this.currentView = 'stage';
    }

    async init() {
        // Initialize core application
        this.appCore = new AppCore();
        await this.appCore.init();
        
        // Initialize data management
        const dataManager = new DataManager();
        await dataManager.init();
        
        // Initialize all editor modules
        this.editors.character = new CharacterEditor(
            document.getElementById('character-editor'),
            this.appCore.eventBus
        );
        
        this.editors.music = new MusicEditor(
            document.getElementById('music-editor'),
            this.appCore.eventBus
        );
        
        this.editors.animation = new AnimationEditor(
            document.getElementById('animation-editor'),
            this.appCore.eventBus
        );
        
        this.editors.stage = new PerformanceStage(
            document.getElementById('performance-stage'),
            this.appCore.eventBus
        );
        
        // Initialize all editors
        await Promise.all([
            this.editors.character.init(),
            this.editors.music.init(),
            this.editors.animation.init(),
            this.editors.stage.init()
        ]);
        
        // Set up navigation
        this.setupNavigation();
        
        // Set up project controls
        this.setupProjectControls();
        
        console.log('Sprunki App initialized successfully');
    }

    setupNavigation() {
        const navButtons = document.querySelectorAll('.nav-tab');
        navButtons.forEach(button => {
            button.addEventListener('click', (e) => {
                const viewName = e.target.id.replace('nav-', '');
                this.switchView(viewName);
            });
        });
    }

    switchView(viewName) {
        // Hide all panels
        document.querySelectorAll('.editor-panel').forEach(panel => {
            panel.classList.add('hidden');
        });
        
        // Show selected panel
        const targetPanel = document.getElementById(`${viewName}-editor`) || 
                          document.getElementById('performance-stage');
        targetPanel.classList.remove('hidden');
        
        // Update navigation
        document.querySelectorAll('.nav-tab').forEach(tab => {
            tab.classList.remove('active');
        });
        document.getElementById(`nav-${viewName}`).classList.add('active');
        
        this.currentView = viewName;
        
        // Notify the editor that it's now active
        if (this.editors[viewName] && this.editors[viewName].onActivate) {
            this.editors[viewName].onActivate();
        }
    }

    setupProjectControls() {
        document.getElementById('save-project').addEventListener('click', () => {
            this.appCore.dataManager.saveProject();
        });
        
        document.getElementById('load-project').addEventListener('click', () => {
            this.appCore.dataManager.loadProject();
        });
        
        document.getElementById('export-project').addEventListener('click', () => {
            this.appCore.dataManager.exportProject();
        });
    }
}

// Initialize the application when DOM is loaded
document.addEventListener('DOMContentLoaded', async () => {
    const app = new SpunkiApp();
    try {
        await app.init();
    } catch (error) {
        console.error('Failed to initialize Sprunki App:', error);
    }
});
```
:::
