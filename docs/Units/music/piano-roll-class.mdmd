<!-- filepath: g:\My Drive\Projects\Toy Projects\Spruki-Like-Game\docs\Units\music\piano-roll-class.mdmd -->
::: {unit}
id: "piano-roll-class"
unit-type: "javascript-class-definition"
language: "javascript"
status: "draft"
version: "0.2"
brief: "UI component for musical note input and editing (piano roll).
Note: This is a complex component; the implementation below is a conceptual sketch."
source-ref: "../../src/music/PianoRoll.js"

A visual interface for creating and editing musical notes, typically showing pitch against time.

```javascript
// This is a conceptual outline. A full piano roll is a significant UI component.
// It might use a canvas library or be built with HTML/SVG.

export class PianoRoll {
    constructor(containerElement, eventBus) {
        this.container = containerElement;
        this.eventBus = eventBus;
        this.notes = []; // Array of { pitch, time, duration, velocity }
        this.config = {
            octaves: 3,
            stepsPerBeat: 4,
            beats: 4, // Length of the loop
            minPitch: 48, // C3
            maxPitch: 83  // B5
        };
        this.gridElement = null;
    }

    async init() {
        this._renderGrid();
        this._setupEventHandlers();
        console.log('PianoRoll initialized');
    }

    _renderGrid() {
        this.container.innerHTML = ''; // Clear previous content
        this.gridElement = document.createElement('div');
        this.gridElement.className = 'piano-roll-grid';
        // Style with CSS for grid lines, note heights, etc.

        const totalPitches = this.config.maxPitch - this.config.minPitch + 1;
        const totalTimeSteps = this.config.beats * this.config.stepsPerBeat;

        this.gridElement.style.display = 'grid';
        this.gridElement.style.gridTemplateRows = `repeat(${totalPitches}, 20px)`;
        this.gridElement.style.gridTemplateColumns = `repeat(${totalTimeSteps}, 30px)`;

        for (let p = 0; p < totalPitches; p++) {
            for (let t = 0; t < totalTimeSteps; t++) {
                const cell = document.createElement('div');
                cell.className = 'piano-roll-cell';
                cell.dataset.pitch = this.config.maxPitch - p; // Higher pitches at the top
                cell.dataset.time = t / this.config.stepsPerBeat; // Time in beats
                cell.dataset.step = t;
                // Add styling for beat/subdivision lines via CSS or JS
                if (t % this.config.stepsPerBeat === 0) {
                    cell.classList.add('beat-line');
                }
                this.gridElement.appendChild(cell);
            }
        }
        this.container.appendChild(this.gridElement);
        this._renderNotes();
    }

    _setupEventHandlers() {
        this.gridElement.addEventListener('click', (e) => {
            if (e.target.classList.contains('piano-roll-cell')) {
                const pitch = parseInt(e.target.dataset.pitch);
                const time = parseFloat(e.target.dataset.time);
                const step = parseInt(e.target.dataset.step);
                this._toggleNote(pitch, time, step);
            }
        });
    }

    _toggleNote(pitch, time, step) {
        const existingNoteIndex = this.notes.findIndex(n => n.pitch === pitch && n.step === step);
        if (existingNoteIndex > -1) {
            this.notes.splice(existingNoteIndex, 1); // Remove note
        } else {
            this.notes.push({
                pitch: pitch, 
                time: time, // Time in beats from start of loop
                duration: 1 / this.config.stepsPerBeat, // Duration in beats (e.g., a 16th note)
                velocity: 0.8, 
                step: step // Discrete time step index
            });
        }
        this.notes.sort((a,b) => a.time - b.time || b.pitch - a.pitch); // Sort for consistent playback
        this._renderNotes();
        this.eventBus.emit('pianoroll:notes:changed', this.getNotes());
    }

    _renderNotes() {
        // Clear existing note elements
        this.gridElement.querySelectorAll('.note-on').forEach(el => el.classList.remove('note-on'));

        // Draw current notes
        this.notes.forEach(note => {
            const cell = this.gridElement.querySelector(
                `.piano-roll-cell[data-pitch='${note.pitch}'][data-step='${note.step}']`
            );
            if (cell) {
                cell.classList.add('note-on');
                // Could also create separate elements for notes to span multiple cells for duration
            }
        });
    }

    getNotes() {
        return JSON.parse(JSON.stringify(this.notes)); // Return a deep copy
    }

    setNotes(notesData) {
        this.notes = notesData ? JSON.parse(JSON.stringify(notesData)) : [];
        this._renderNotes();
    }

    clear() {
        this.notes = [];
        this._renderNotes();
        this.eventBus.emit('pianoroll:notes:changed', this.getNotes());
    }

    dispose() {
        if (this.gridElement) {
            this.gridElement.removeEventListener('click', this._toggleNote); // Be more specific if needed
        }
        this.container.innerHTML = '';
        console.log('PianoRoll disposed');
    }
}
```
:::
