<!-- filepath: docs/Units/character/character-data-schema.mdmd -->
::: {unit}
id: "character-data-schema"
title: "Sprunki Character Data Schema"
unit-type: "json-schema-definition"
language: "json"
status: "revised"
version: "0.4"
brief: "Defines the JSON structure for Sprunki characters with simplified anatomy: trapezoid body, floating hands, and expressive head with optional sub-elements."
source-ref: "../../src/character/CharacterData.js"
see-also:
  - "[[../Concepts/character-editor-module.mdmd]]" # Parent composition
  - "[[project-file-schema]]" # Architectural association (used by project schema)
  - "[[../animation/animation-keyframe-schema.mdmd]]" # Animation data structure

This unit describes the data structure for Sprunki characters based on actual Sprunki anatomy: simple trapezoid bodies, floating circle hands, and highly expressive heads. The schema supports hybrid animation combining transform-based movement with sprite-swap expressions, optimized for minimal rigging while maximizing creative expressiveness.

```json
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "SprunkiCharacterData",
  "description": "Schema for Sprunki character data with simplified anatomy and hybrid animation system",
  "type": "object",
  "properties": {
    "id": {
      "type": "string",
      "format": "uuid",
      "description": "Unique identifier for the character"
    },
    "name": {
      "type": "string",
      "description": "User-defined name for the character"
    },
    "createdAt": {
      "type": "string",
      "format": "date-time",
      "description": "Timestamp of character creation"
    },
    "updatedAt": {
      "type": "string",
      "format": "date-time",
      "description": "Timestamp of last character update"
    },
    "parts": {
      "type": "object",
      "description": "Sprunki character parts based on actual anatomy",
      "properties": {
        "body": {
          "$ref": "#/definitions/trapezoidBody",
          "description": "Tall trapezoid body shape (thinner top, wider bottom)"
        },
        "head": {
          "$ref": "#/definitions/expressiveHead",
          "description": "Complex head with sub-elements for animation"
        },
        "hands": {
          "type": "object",
          "description": "Floating circle hands (no arm connections)",
          "properties": {
            "left": { "$ref": "#/definitions/floatingHand" },
            "right": { "$ref": "#/definitions/floatingHand" }
          },
          "required": ["left", "right"]
        }
      },
      "required": ["body", "head", "hands"]
    },
    "expressions": {
      "type": "object",
      "description": "Named expression states for face animation",
      "properties": {
        "idle": { "$ref": "#/definitions/expressionState" },
        "singing": { "$ref": "#/definitions/expressionState" },
        "surprised": { "$ref": "#/definitions/expressionState" }
      },
      "additionalProperties": { 
        "$ref": "#/definitions/expressionState",
        "description": "User-defined custom expressions"
      }
    },
    "defaultPose": {
      "$ref": "#/definitions/characterPose",
      "description": "Default positioning and scale for all parts"
    },
    "metadata": {
      "type": "object",
      "description": "Additional character metadata",
      "properties": {
        "templateBased": {
          "type": "boolean",
          "description": "Whether character was created from template"
        },
        "complexity": {
          "type": "string",
          "enum": ["simple", "detailed", "advanced"],
          "description": "Character complexity level"
        },
        "tags": {
          "type": "array",
          "items": { "type": "string" },
          "description": "User-defined tags for organization"
        }
      }
    }
  },
  "required": ["id", "name", "parts", "expressions", "defaultPose"],
  "definitions": {
    "trapezoidBody": {
      "type": "object",
      "description": "Simple trapezoid body geometry",
      "properties": {
        "geometry": {
          "type": "object",
          "properties": {
            "topWidth": { "type": "number", "minimum": 10 },
            "bottomWidth": { "type": "number", "minimum": 15 },
            "height": { "type": "number", "minimum": 20 },
            "cornerRadius": { "type": "number", "minimum": 0 }
          },
          "required": ["topWidth", "bottomWidth", "height"]
        },
        "style": {
          "$ref": "#/definitions/partStyle"
        },
        "transform": {
          "$ref": "#/definitions/transform2D"
        }
      },
      "required": ["geometry", "style", "transform"]
    },
    "expressiveHead": {
      "type": "object",
      "description": "Complex head with optional sub-elements",
      "properties": {
        "base": {
          "type": "object",
          "description": "Head base shape",
          "properties": {
            "geometry": { "$ref": "#/definitions/vectorPath" },
            "style": { "$ref": "#/definitions/partStyle" }
          },
          "required": ["geometry", "style"]
        },
        "eyes": {
          "type": "object",
          "description": "Eye elements with expression support",
          "properties": {
            "left": { "$ref": "#/definitions/eyeElement" },
            "right": { "$ref": "#/definitions/eyeElement" }
          },
          "required": ["left", "right"]
        },
        "mouth": {
          "$ref": "#/definitions/mouthElement",
          "description": "Mouth with expression state support"
        },
        "appendages": {
          "type": "array",
          "items": { "$ref": "#/definitions/headAppendage" },
          "description": "Custom head appendages (horns, antennae, etc.)"
        },
        "transform": {
          "$ref": "#/definitions/transform2D"
        }
      },
      "required": ["base", "eyes", "mouth", "transform"]
    },
    "floatingHand": {
      "type": "object",
      "description": "Simple floating circle hand",
      "properties": {
        "geometry": {
          "type": "object",
          "properties": {
            "radius": { "type": "number", "minimum": 5 }
          },
          "required": ["radius"]
        },
        "style": {
          "$ref": "#/definitions/partStyle"
        },
        "position": {
          "$ref": "#/definitions/point2D",
          "description": "Absolute position (no attachment to body)"
        }
      },
      "required": ["geometry", "style", "position"]
    },
    "eyeElement": {
      "type": "object",
      "description": "Individual eye with expression states",
      "properties": {
        "geometry": { "$ref": "#/definitions/vectorPath" },
        "style": { "$ref": "#/definitions/partStyle" },
        "position": { "$ref": "#/definitions/point2D" },
        "expressionStates": {
          "type": "object",
          "description": "Different eye states for expressions",
          "additionalProperties": {
            "type": "object",
            "properties": {
              "geometry": { "$ref": "#/definitions/vectorPath" },
              "transform": { "$ref": "#/definitions/transform2D" }
            }
          }
        }
      },
      "required": ["geometry", "style", "position"]
    },
    "mouthElement": {
      "type": "object",
      "description": "Mouth with sprite-swap expression support",
      "properties": {
        "geometry": { "$ref": "#/definitions/vectorPath" },
        "style": { "$ref": "#/definitions/partStyle" },
        "position": { "$ref": "#/definitions/point2D" },
        "expressionStates": {
          "type": "object",
          "description": "Different mouth shapes for expressions",
          "additionalProperties": {
            "type": "object",
            "properties": {
              "geometry": { "$ref": "#/definitions/vectorPath" },
              "transform": { "$ref": "#/definitions/transform2D" }
            }
          }
        }
      },
      "required": ["geometry", "style", "position"]
    },
    "headAppendage": {
      "type": "object",
      "description": "Custom head appendage (horns, antennae, etc.)",
      "properties": {
        "id": { "type": "string" },
        "name": { "type": "string" },
        "geometry": { "$ref": "#/definitions/vectorPath" },
        "style": { "$ref": "#/definitions/partStyle" },
        "attachmentPoint": { "$ref": "#/definitions/point2D" },
        "transform": { "$ref": "#/definitions/transform2D" },
        "animationConstraints": {
          "type": "object",
          "properties": {
            "maxRotation": { "type": "number" },
            "elasticity": { "type": "number", "minimum": 0, "maximum": 1 }
          }
        }
      },
      "required": ["id", "geometry", "style", "attachmentPoint", "transform"]
    },
    "expressionState": {
      "type": "object",
      "description": "Complete facial expression configuration",
      "properties": {
        "eyes": {
          "type": "object",
          "properties": {
            "left": { "type": "string", "description": "Eye state name" },
            "right": { "type": "string", "description": "Eye state name" }
          }
        },
        "mouth": {
          "type": "string",
          "description": "Mouth state name"
        },
        "duration": {
          "type": "number",
          "minimum": 0,
          "description": "Duration for expression transition (seconds)"
        }
      },
      "required": ["eyes", "mouth"]
    },
    "characterPose": {
      "type": "object",
      "description": "Complete character positioning",
      "properties": {
        "body": { "$ref": "#/definitions/transform2D" },
        "head": { "$ref": "#/definitions/transform2D" },
        "hands": {
          "type": "object",
          "properties": {
            "left": { "$ref": "#/definitions/point2D" },
            "right": { "$ref": "#/definitions/point2D" }
          }
        },
        "expression": {
          "type": "string",
          "description": "Active expression state name"
        }
      },
      "required": ["body", "head", "hands"]
    },
                }
              }
            }
          }
        },
        "constraints": {
          "type": "object",
          "description": "Animation constraints for realistic movement",
          "patternProperties": {
            "^[a-zA-Z]+$": {
              "type": "object",
              "properties": {
                "rotationLimits": {
                  "type": "object",
                  "properties": {
                    "min": { "type": "number" },
                    "max": { "type": "number" }
                  }
                },
                "scaleLimits": {
                  "type": "object", 
                  "properties": {
                    "min": { "type": "number" },
                    "max": { "type": "number" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "animations": {
      "type": "object",
      "description": "Named animation sequences for this character",
      "patternProperties": {
        "^[a-zA-Z0-9_-]+$": {
          "type": "object",
          "properties": {
            "name": { "type": "string" },
            "duration": { "type": "number" },
            "loop": { "type": "boolean" },
            "keyframes": {
              "type": "array",
              "items": { "$ref": "#/definitions/animationKeyframe" }
            }
          }
        }
      }
    },
    "stagePosition": {
      "$ref": "#/definitions/point2D",
      "description": "Character's fixed position on performance stage"
    },
    "metadata": {
      "type": "object",
      "description": "Additional character metadata"
    }
  },
  "required": [
    "id",
    "name",
    "parts",
    "rig"
  ],
  "definitions": {
    "characterPart": {
      "type": "object",
      "description": "Individual drawable character part",
      "properties": {
        "fabricObject": {
          "type": "object",
          "description": "Serialized Fabric.js object representing this part"
        },
        "attachmentPoints": {
          "type": "object",
          "description": "Connection points for rigging to other parts",
          "patternProperties": {
            "^[a-zA-Z]+$": { "$ref": "#/definitions/point2D" }
          }
        },
        "boundingBox": {
          "type": "object",
          "properties": {
            "x": { "type": "number" },
            "y": { "type": "number" },
            "width": { "type": "number" },
            "height": { "type": "number" }
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": ["fabricObject"]
    },
    "point2D": {
      "type": "object",
      "properties": {
        "x": { "type": "number" },
        "y": { "type": "number" }
      },
      "required": ["x", "y"]
    },
    "animationKeyframe": {
      "type": "object",
      "description": "Single keyframe in animation sequence",
      "properties": {
        "time": { "type": "number", "description": "Time position in seconds" },
        "partTransforms": {
          "type": "object",
          "patternProperties": {
            "^[a-zA-Z]+$": {
              "type": "object",
              "properties": {
                "rotation": { "type": "number" },
                "position": { "$ref": "#/definitions/point2D" },
                "scale": { "$ref": "#/definitions/point2D" }
              }
            }
          }
        },
        "easing": { 
          "type": "string", 
          "enum": ["linear", "easeIn", "easeOut", "easeInOut"],
          "default": "easeInOut"
        }
      },
      "required": ["time", "partTransforms"]
    }
  }
}
      "description": "Optional structured hierarchy of character parts, if not solely relying on Fabric groups.",
      "items": {
        "type": "object",
        "properties": {
          "partId": { "type": "string" },
          "name": { "type": "string" },
          "fabricObjectIds": { 
            "type": "array", 
            "items": { "type": "string" },
            "description": "IDs of Fabric.js objects belonging to this part"
          },
          "transform": { "type": "object", "description": "Relative transform if hierarchical" }
          // Add other part-specific metadata
        }
      }
    },
    "metadata": {
        "type": "object",
        "description": "Any other custom metadata for the character"
    }
  },
  "required": [
    "id",
    "name",
    "fabricCanvas"
  ]
}
```

A corresponding JavaScript file (`src/character/CharacterData.js`) might look like this:

```javascript
// src/character/CharacterData.js

/**
 * Generates a new character data object with default values.
 * @param {string} name - The name of the character.
 * @returns {object} A new character data object.
 */
export function createNewCharacterData(name) {
    return {
        id: self.crypto.randomUUID(), // Browser environment
        name: name || 'New Character',
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        fabricCanvas: null, // To be populated by Fabric.js toJSON()
        parts: [],
        metadata: {}
    };
}

/**
 * Validates character data against the schema (basic validation example).
 * @param {object} characterData - The character data to validate.
 * @returns {boolean} True if valid, false otherwise.
 */
export function isValidCharacterData(characterData) {
    if (!characterData || typeof characterData !== 'object') return false;
    if (typeof characterData.id !== 'string') return false;
    if (typeof characterData.name !== 'string') return false;
    if (typeof characterData.fabricCanvas !== 'object') return false; // Could be null initially
    return true;
}

// Potentially, a CharacterData class could also be defined here to wrap the object
// and provide methods for manipulation, if preferred over plain utility functions.
```

:::
